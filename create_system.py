

import sys


def create_cpp_file(system_name):
    with open("./src/{}.cpp".format(system_name), "w") as file:
        file.write("\n")
        file.write("#include <vector>\n")
        file.write("\n")
        file.write("#include \"{}.h\"\n".format(system_name))
        file.write("#include \"EventManager.h\"\n")
        file.write("#include \"Events.h\"\n")
        file.write("#include \"EventTypes.h\"\n")
        file.write("\n")
        file.write("{}::{}(EventManager* eventManager, std::vector<GameObject*> *entities):\n".format(system_name, system_name))
        file.write("m_eventManager(eventManager), m_entities(entities)\n")
        file.write("{\n")
        file.write("  m_eventManager->registerSystem(MOVE, this);\n")
        file.write("  m_eventManager->registerSystem(ONHIT, this);\n")
        file.write("  m_eventManager->registerSystem(ONMISS, this);\n")
        file.write("  m_eventManager->registerSystem(DAMAGE, this);\n")
        file.write("  m_eventManager->registerSystem(DEAD, this);\n")
        file.write("  m_eventManager->registerSystem(TAKE, this);\n")
        file.write("  m_eventManager->registerSystem(ONPICKUP, this);\n")
        file.write("}\n")
        file.write("\n")
        file.write("{}::~{}():\n".format(system_name, system_name))
        file.write("{\n")
        file.write("  m_eventManager = nullptr;\n")
        file.write("  m_entities = nullptr;\n")
        file.write("};\n")
        file.write("\n")
        file.write("void {}::notify(MoveEvent event)\n")
        file.write("{\n")
        file.write("  //TO DO\n")
        file.write("}")
        file.write("\n")
        file.write("void {}::notify(OnHitEvent event)\n")
        file.write("{\n")
        file.write("  //TO DO\n")
        file.write("}")
        file.write("\n")
        file.write("void {}::notify(OnMissEvent event)\n")
        file.write("{\n")
        file.write("  //TO DO\n")
        file.write("}")
        file.write("\n")
        file.write("void {}::notify(DamageEvent event)\n")
        file.write("{\n")
        file.write("  //TO DO\n")
        file.write("}")
        file.write("\n")
        file.write("void {}::notify(DeadEvent event)\n")
        file.write("{\n")
        file.write("  //TO DO\n")
        file.write("}")
        file.write("\n")
        file.write("void {}::notify(TakeEvent event)\n")
        file.write("{\n")
        file.write("  //TO DO\n")
        file.write("}")
        file.write("\n")
        file.write("void {}::notify(OnPickUpEvent event)\n")
        file.write("{\n")
        file.write("  //TO DO\n")
        file.write("}")



def create_h_file(system_name):
    with open("./include/{}.h".format(system_name), "w") as file:
        file.write("#ifndef {}_H\n".format(system_name.upper()))
        file.write("#define {}_H\n".format(system_name.upper()))
        file.write("\n")
        file.write("#include <vector>\n")
        file.write("\n")
        file.write("#include \"System.h\"\n")
        file.write("#include \"Events.h\"\n")
        file.write("#include \"GameObject.h\"\n")
        file.write("\n")
        file.write("class EventManager;\n")
        file.write("\n")
        file.write("class {} : public System\n".format(system_name))
        file.write("{\n")
        file.write("public:\n")
        file.write("  {}(EventManager* eventManager, std::vector<GameObject*> *entities);\n".format(system_name))
        file.write("  virtual ~{}();\n".format(system_name))
        file.write("  virutal void notify(MoveEvent event);\n")
        file.write("  virutal void notify(OnHitEvent event);\n")
        file.write("  virutal void notify(OnMissEvent event);\n")
        file.write("  virutal void notify(DamageEvent event);\n")
        file.write("  virutal void notify(DeadEvent event);\n")
        file.write("  virutal void notify(TakeEvent event);\n")
        file.write("  virutal void notify(OnPickUpEvent event);\n")
        file.write("private:\n")
        file.write("  EventManager* m_eventManager;\n")
        file.write("  std::vector<GameObject*> *m_entities;\n")
        file.write("};\n")
        file.write("#endif")


if __name__ == "__main__":
    create_cpp_file(sys.argv[1])
    create_h_file(sys.argv[1])
